receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  docker_stats:
    endpoint: unix:///var/run/docker.sock
  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu:
      memory:
      load:
      disk:

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
  resource:
    attributes:
      - action: insert
        key: service.instance.id
        value: "${HOSTNAME}"
      - action: insert
        key: deployment.environment
        value: "${OTEL_ENVIRONMENT}"
  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    policies:
      [
        {
          name: sample-health-checks,
          type: probabilistic,
          probabilistic: {sampling_percentage: 2},
          string_attribute: {key: uri, values: [\/health], enabled_regex_matching: true}
        }
      ]

exporters:
  otlp/traces:
    endpoint: "api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      "x-honeycomb-dataset": "syllabus-tracker"
  otlp/metrics:
    endpoint: "api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      "x-honeycomb-dataset": "syllabus-tracker-metrics"
  debug:
    verbosity: normal

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch, resource, tail_sampling]
      exporters: [otlp/traces]
    metrics:
      receivers: [docker_stats, hostmetrics, otlp]
      processors: [batch, resource]
      exporters: [otlp/metrics]

  # Otel Collector internal telemetry configuration
  telemetry:
    metrics:
      level: normal
      readers:
        - periodic:
            exporter:
              otlp:
                protocol: http/protobuf
                # Send to itself, which can then be exported as normal
                endpoint: http://localhost:4318
