name: syllabus-tracker
services:
  app:
    image: ${APP_IMAGE:-syllabus-tracker_app:latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: always
    env_file:
      - config/common.env
      - config/prod.env
      - .secrets.env
    volumes:
      - app-data:/app/data
      - ./config:/app/config
    depends_on:
      - otel-collector
    networks:
      - internal
    deploy:
      replicas: 1
      update_config:
        order: start-first
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 30s
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 30s

  frontend:
    image: ${FRONTEND_IMAGE:-syllabus-tracker_frontend:latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    restart: always
    networks:
      - internal
    volumes:
      - frontend-dist:/usr/share/nginx/html

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.prod.yaml:/etc/otel-collector-config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
    group_add:
      - 988
    env_file:
      - config/common.env
      - config/prod.env
      - .secrets.env
    restart: always
    networks:
      - internal

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/ssl.conf.template
      - ./scripts/nginx-entrypoint.sh:/entrypoint.sh
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www
      - frontend-dist:/usr/share/nginx/html
    env_file:
      - config/prod.env
    depends_on:
      - app
      - frontend
    networks:
      - internal
      - external
    entrypoint:
      - /entrypoint.sh

  backup:
    image: alpine:latest
    volumes:
      - app-data:/app/data
      - ./backups:/data/backups
      - ./scripts:/scripts
    env_file:
      - config/prod.env
      - config/backup-service.env
      - .secrets.env
    command: |
      /bin/sh -c '
      apk add --no-cache sqlite findutils tzdata curl go bc

      go install github.com/equinix-labs/otel-cli@latest
      export PATH=$PATH:/root/go/bin

      # Run the backup script
      exec /scripts/backup.sh
      '
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "test -f /tmp/backup-state/heartbeat && find /tmp/backup-state/heartbeat -mmin -15 | grep heartbeat",
        ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - app
      - otel-collector
    networks:
      - internal

networks:
  internal:
  external:

volumes:
  app-data:
  frontend-dist:
