name: Build and Deploy to Production
on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILDEVENT_FILE: "/tmp/buildevent-attrs"

jobs:
  start-build:
    runs-on: ubuntu-latest
    outputs:
      trace_id: ${{ steps.start_trace.outputs.trace_id }}
      build_id: ${{ github.run_id }}
      trace_start: ${{ steps.set-trace-start.outputs.trace_start }}

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.HONEYCOMB_API_KEY }}
          dataset: syllabus-tracker-build-events

      - name: Start build trace
        id: start_trace
        run: |
          # Save trace ID and build ID for other jobs
          echo "trace_id=$TRACE_ID" >> $GITHUB_OUTPUT

          # Start the build trace
          BUILD_ID=${{ github.run_id }}
          BUILD_NAME="Build ${{ github.repository }} ${{ github.ref }}"
          START_TIME=$(date +%s)

          echo "trace_start=$START_TIME" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: [start-build]

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.HONEYCOMB_API_KEY }}
          dataset: syllabus-tracker-build-events
          trace_id: ${{ needs.start-build.outputs.trace_id }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Record test step start
        id: test-start
        run: |
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
          echo "STEP_ID=run_tests" >> $GITHUB_ENV

      - name: Run cargo fmt check
        run: |
          buildevents cmd $TRACE_ID $STEP_ID cargo_fmt -- \
            cargo fmt --all -- --check

      - name: Run cargo clippy
        run: |
          buildevents cmd $TRACE_ID $STEP_ID cargo_clippy -- \
            cargo clippy -- -D warnings
        env:
          SQLX_OFFLINE: "true"

      - name: Run Rust tests
        run: |
          buildevents cmd $TRACE_ID $STEP_ID cargo_test -- \
            cargo test --all
        env:
          SQLX_OFFLINE: "true"

      - name: Complete test step
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START "Run Tests"

  build-backend:
    runs-on: ubuntu-latest
    needs: [start-build]
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.get_short_sha.outputs.short_sha }}

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.HONEYCOMB_API_KEY }}
          dataset: syllabus-tracker-build-events
          trace_id: ${{ needs.start-build.outputs.trace_id }}

      - name: Record backend build start
        run: |
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
          echo "STEP_ID=build-backend-image" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short SHA
        id: get_short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:${{ steps.get_short_sha.outputs.short_sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            HONEYCOMB_API_KEY=${{ secrets.HONEYCOMB_API_KEY }}
            ROCKET_SECRET_KEY=${{ secrets.ROCKET_SECRET_KEY }}

      - name: Log build details to telemetry
        run: |
          echo " backend_image_tag=app:${{ steps.get_short_sha.outputs.short_sha }}" >> $BUILDEVENT_FILE
          echo " backend_build_successful=true" >> $BUILDEVENT_FILE

      - name: Complete backend build step
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START "Build Backend Image"

  build-frontend:
    runs-on: ubuntu-latest
    needs: [start-build]
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.get_short_sha.outputs.short_sha }}

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.HONEYCOMB_API_KEY }}
          dataset: syllabus-tracker-build-events
          trace_id: ${{ needs.start-build.outputs.trace_id }}

      - name: Record frontend build start
        run: |
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
          echo "STEP_ID=build-frontend-image" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short SHA
        id: get_short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.get_short_sha.outputs.short_sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_HONEYCOMB_API_KEY=${{ secrets.HONEYCOMB_API_KEY }}
            VITE_API_URL=/api
            VITE_ENVIRONMENT=production

      - name: Log build details to telemetry
        run: |
          echo " frontend_image_tag=frontend:${{ steps.get_short_sha.outputs.short_sha }}" >> $BUILDEVENT_FILE
          echo " frontend_build_successful=true" >> $BUILDEVENT_FILE

      - name: Complete frontend build step
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START "Build Frontend Image"

  deploy:
    needs: [build-backend, build-frontend, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.HONEYCOMB_API_KEY }}
          dataset: syllabus-tracker-build-events
          trace_id: ${{ needs.start-build.outputs.trace_id }}
          start_time: ${{ needs.start-build.outputs.start_time }}
          status: ${{ env.WORKFLOW_CONCLUSION }}

      - name: Checkout code (minimal for config files)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.prod.yml
            config/
            nginx/
            scripts/

      - name: Set up SSH
        run: |
          STEP_ID=set_up_ssh
          STEP_START=$(date +%s)
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          buildevents step $TRACE_ID $STEP_ID $STEP_START "Set up SSH"

      - name: Transfer essential files to server
        run: |
          STEP_ID=transfer_files
          STEP_START=$(date +%s)

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/syllabus-tracker/config ~/syllabus-tracker/scripts ~/syllabus-tracker/nginx"

          buildevents cmd $TRACE_ID $STEP_ID rsync -- \
          rsync -avzi --include="docker-compose.prod.yml" \
            --include="config/***" \
            --include="scripts/***" \
            --include="nginx/***" \
            --exclude="*" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/syllabus-tracker/

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "chmod +x ~/syllabus-tracker/scripts/*.sh"

          buildevents step $TRACE_ID $STEP_ID $STEP_START "Transfer Files"

      - name: Generate secrets file
        run: |
          STEP_ID=generate_secrets
          STEP_START=$(date +%s)

          echo "HONEYCOMB_API_KEY=${{ secrets.HONEYCOMB_API_KEY }}" > .secrets.env
          echo "ROCKET_SECRET_KEY=${{ secrets.ROCKET_SECRET_KEY }}" >> .secrets.env
          echo "VITE_HONEYCOMB_API_KEY=${{ secrets.HONEYCOMB_API_KEY }}" >> .secrets.env

          scp .secrets.env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/syllabus-tracker/

          buildevents step $TRACE_ID $STEP_ID $STEP_START "Generate Secrets"

      - name: Set up GitHub Container Registry credentials on server
        run: |
          STEP_ID=setup_registry_creds
          STEP_START=$(date +%s)

          # Create a JSON config for Docker to authenticate with GHCR
          cat > docker_config.json << EOF
          {
            "auths": {
              "${{ env.REGISTRY }}": {
                "auth": "$(echo -n ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} | base64)"
              }
            }
          }
          EOF

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/.docker"
          scp docker_config.json ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/.docker/config.json

          buildevents step $TRACE_ID $STEP_ID $STEP_START "Setup Registry Credentials"

      - name: Deploy with Docker Compose
        run: |
          STEP_ID=deploy_docker
          STEP_START=$(date +%s)

          APP_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:${{ needs.build-backend.outputs.image_tag }}"
          FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.build-frontend.outputs.image_tag }}"
          GITHUB_REPOSITORY="${{ github.repository }}"

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd ~/syllabus-tracker && \
            export APP_IMAGE=${APP_IMAGE} && \
            export FRONTEND_IMAGE=${FRONTEND_IMAGE} && \
            export GITHUB_REPOSITORY=${GITHUB_REPOSITORY} && \
            docker compose -f docker-compose.prod.yml pull && \
            docker compose -f docker-compose.prod.yml up -d"

          echo "Monitoring deployment for 30 seconds..."
          sleep 30

          CONTAINER_STATUS=$(ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "docker ps --filter name=syllabus-tracker-app --format '{{.Status}}' | grep -o '(healthy)\\|(unhealthy)' || echo 'not found'")

          if [[ "$CONTAINER_STATUS" != *"healthy"* ]]; then
            echo "Warning: Container is not healthy. Deployment may have failed."
            echo " deployment_status=unhealthy" >> $BUILDEVENT_FILE
            echo " deploy_completed=false" >> $BUILDEVENT_FILE
            buildevents step $TRACE_ID $STEP_ID $STEP_START "Deploy Docker (Failed)"
            exit 1
          fi

          # Clean up old images
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker image prune -f"

          echo " deployed_app_image=${APP_IMAGE}" >> $BUILDEVENT_FILE
          echo " deployed_frontend_image=${FRONTEND_IMAGE}" >> $BUILDEVENT_FILE
          buildevents step $TRACE_ID $STEP_ID $STEP_START "Deploy Docker"

      - name: Create Honeycomb deployment marker
        run: |
          STEP_ID=create_marker
          STEP_START=$(date +%s)

          DEPLOY_TIME=$(date +%s)
          GIT_COMMIT_HASH=$(git rev-parse HEAD)
          GIT_COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\n')

          curl -X POST "https://api.honeycomb.io/1/markers/__all__" \
            -H "X-Honeycomb-Team: ${{ secrets.HONEYCOMB_MARKER_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"message\": \"Deployed commit ${GIT_COMMIT_HASH}\",
              \"type\": \"deploy\",
              \"start_time\": ${DEPLOY_TIME},
              \"url\": \"https://github.com/${{ github.repository }}/commit/${{ github.sha }}\",
              \"metadata\": {
                \"commit_hash\": \"${GIT_COMMIT_HASH}\",
                \"commit_message\": \"${GIT_COMMIT_MESSAGE}\",
                \"github_actor\": \"${{ github.actor }}\",
                \"github_repository\": \"${{ github.repository }}\",
                \"github_ref\": \"${{ github.ref }}\"
              }
            }"

          buildevents step $TRACE_ID $STEP_ID $STEP_START "Create Marker"
        env:
          HONEYCOMB_API_KEY: ${{ secrets.HONEYCOMB_API_KEY }}

  end-trace:
    runs-on: ubuntu-latest
    needs: [start-build, deploy]
    if: ${{ always() }}
    permissions:
      actions: read
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.HONEYCOMB_API_KEY }}
          dataset: syllabus-tracker-build-events
          status: ${{ env.WORKFLOW_CONCLUSION }}
          trace-start: ${{ needs.start-build.outputs.trace_start}}
